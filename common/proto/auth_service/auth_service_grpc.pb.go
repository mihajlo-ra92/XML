// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: auth_service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_Login_FullMethodName                         = "/user.AuthService/Login"
	AuthService_AuthCreateAccommodation_FullMethodName       = "/user.AuthService/AuthCreateAccommodation"
	AuthService_AuthUpdateUser_FullMethodName                = "/user.AuthService/AuthUpdateUser"
	AuthService_AuthDeleteUser_FullMethodName                = "/user.AuthService/AuthDeleteUser"
	AuthService_AuthGuestReserveAccommodation_FullMethodName = "/user.AuthService/AuthGuestReserveAccommodation"
	AuthService_AuthBookingAccept_FullMethodName             = "/user.AuthService/AuthBookingAccept"
	AuthService_AuthBookingDeny_FullMethodName               = "/user.AuthService/AuthBookingDeny"
	AuthService_AuthReservationCanceling_FullMethodName      = "/user.AuthService/AuthReservationCanceling"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	AuthCreateAccommodation(ctx context.Context, in *AuthCreateAccommodationRequest, opts ...grpc.CallOption) (*AuthCreateAccommodationResponse, error)
	AuthUpdateUser(ctx context.Context, in *AuthUpdateUserRequest, opts ...grpc.CallOption) (*AuthUpdateUserResponse, error)
	AuthDeleteUser(ctx context.Context, in *AuthDeleteUserRequest, opts ...grpc.CallOption) (*AuthDeleteUserResponse, error)
	AuthGuestReserveAccommodation(ctx context.Context, in *AuthGuestReserveAccommodationRequest, opts ...grpc.CallOption) (*AuthGuestReserveAccommodationResponse, error)
	AuthBookingAccept(ctx context.Context, in *AuthBookingAcceptRequest, opts ...grpc.CallOption) (*AuthBookingAcceptResponse, error)
	AuthBookingDeny(ctx context.Context, in *AuthBookingDenyRequest, opts ...grpc.CallOption) (*AuthBookingDenyResponse, error)
	AuthReservationCanceling(ctx context.Context, in *AuthReservationCancelingRequest, opts ...grpc.CallOption) (*AuthReservationCancelingResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthCreateAccommodation(ctx context.Context, in *AuthCreateAccommodationRequest, opts ...grpc.CallOption) (*AuthCreateAccommodationResponse, error) {
	out := new(AuthCreateAccommodationResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthCreateAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthUpdateUser(ctx context.Context, in *AuthUpdateUserRequest, opts ...grpc.CallOption) (*AuthUpdateUserResponse, error) {
	out := new(AuthUpdateUserResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthUpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthDeleteUser(ctx context.Context, in *AuthDeleteUserRequest, opts ...grpc.CallOption) (*AuthDeleteUserResponse, error) {
	out := new(AuthDeleteUserResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthDeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthGuestReserveAccommodation(ctx context.Context, in *AuthGuestReserveAccommodationRequest, opts ...grpc.CallOption) (*AuthGuestReserveAccommodationResponse, error) {
	out := new(AuthGuestReserveAccommodationResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthGuestReserveAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthBookingAccept(ctx context.Context, in *AuthBookingAcceptRequest, opts ...grpc.CallOption) (*AuthBookingAcceptResponse, error) {
	out := new(AuthBookingAcceptResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthBookingAccept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthBookingDeny(ctx context.Context, in *AuthBookingDenyRequest, opts ...grpc.CallOption) (*AuthBookingDenyResponse, error) {
	out := new(AuthBookingDenyResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthBookingDeny_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthReservationCanceling(ctx context.Context, in *AuthReservationCancelingRequest, opts ...grpc.CallOption) (*AuthReservationCancelingResponse, error) {
	out := new(AuthReservationCancelingResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthReservationCanceling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	AuthCreateAccommodation(context.Context, *AuthCreateAccommodationRequest) (*AuthCreateAccommodationResponse, error)
	AuthUpdateUser(context.Context, *AuthUpdateUserRequest) (*AuthUpdateUserResponse, error)
	AuthDeleteUser(context.Context, *AuthDeleteUserRequest) (*AuthDeleteUserResponse, error)
	AuthGuestReserveAccommodation(context.Context, *AuthGuestReserveAccommodationRequest) (*AuthGuestReserveAccommodationResponse, error)
	AuthBookingAccept(context.Context, *AuthBookingAcceptRequest) (*AuthBookingAcceptResponse, error)
	AuthBookingDeny(context.Context, *AuthBookingDenyRequest) (*AuthBookingDenyResponse, error)
	AuthReservationCanceling(context.Context, *AuthReservationCancelingRequest) (*AuthReservationCancelingResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) AuthCreateAccommodation(context.Context, *AuthCreateAccommodationRequest) (*AuthCreateAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCreateAccommodation not implemented")
}
func (UnimplementedAuthServiceServer) AuthUpdateUser(context.Context, *AuthUpdateUserRequest) (*AuthUpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUpdateUser not implemented")
}
func (UnimplementedAuthServiceServer) AuthDeleteUser(context.Context, *AuthDeleteUserRequest) (*AuthDeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthDeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) AuthGuestReserveAccommodation(context.Context, *AuthGuestReserveAccommodationRequest) (*AuthGuestReserveAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthGuestReserveAccommodation not implemented")
}
func (UnimplementedAuthServiceServer) AuthBookingAccept(context.Context, *AuthBookingAcceptRequest) (*AuthBookingAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthBookingAccept not implemented")
}
func (UnimplementedAuthServiceServer) AuthBookingDeny(context.Context, *AuthBookingDenyRequest) (*AuthBookingDenyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthBookingDeny not implemented")
}
func (UnimplementedAuthServiceServer) AuthReservationCanceling(context.Context, *AuthReservationCancelingRequest) (*AuthReservationCancelingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthReservationCanceling not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthCreateAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCreateAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthCreateAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthCreateAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthCreateAccommodation(ctx, req.(*AuthCreateAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthUpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthUpdateUser(ctx, req.(*AuthUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthDeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthDeleteUser(ctx, req.(*AuthDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthGuestReserveAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthGuestReserveAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthGuestReserveAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthGuestReserveAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthGuestReserveAccommodation(ctx, req.(*AuthGuestReserveAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthBookingAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthBookingAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthBookingAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthBookingAccept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthBookingAccept(ctx, req.(*AuthBookingAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthBookingDeny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthBookingDenyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthBookingDeny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthBookingDeny_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthBookingDeny(ctx, req.(*AuthBookingDenyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthReservationCanceling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReservationCancelingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthReservationCanceling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthReservationCanceling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthReservationCanceling(ctx, req.(*AuthReservationCancelingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "AuthCreateAccommodation",
			Handler:    _AuthService_AuthCreateAccommodation_Handler,
		},
		{
			MethodName: "AuthUpdateUser",
			Handler:    _AuthService_AuthUpdateUser_Handler,
		},
		{
			MethodName: "AuthDeleteUser",
			Handler:    _AuthService_AuthDeleteUser_Handler,
		},
		{
			MethodName: "AuthGuestReserveAccommodation",
			Handler:    _AuthService_AuthGuestReserveAccommodation_Handler,
		},
		{
			MethodName: "AuthBookingAccept",
			Handler:    _AuthService_AuthBookingAccept_Handler,
		},
		{
			MethodName: "AuthBookingDeny",
			Handler:    _AuthService_AuthBookingDeny_Handler,
		},
		{
			MethodName: "AuthReservationCanceling",
			Handler:    _AuthService_AuthReservationCanceling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}
